Algorithm: MERGE(c, l, mid, r)
1.  n ← mid - l + 1
2.  Create array a[0..n-1]
3.  For i ← 0 to n - 1 do
4.      a[i] ← c[l + i]
5.  m ← r - mid
6.  Create array b[0..m-1]
7.  For i ← 0 to m - 1 do
8.      b[i] ← c[mid + 1 + i]
9.  i ← 0, j ← 0, curr ← l
10. While i < n and j < m do
11.     If a[i] < b[j] then
12.         c[curr] ← a[i]
13.         i ← i + 1
14.     Else
15.         c[curr] ← b[j]
16.         j ← j + 1
17.     curr ← curr + 1
18. While i < n do
19.     c[curr] ← a[i]
20.     i ← i + 1
21.     curr ← curr + 1
22. While j < m do
23.     c[curr] ← b[j]
24.     j ← j + 1
25.     curr ← curr + 1


Algorithm: MERGE_SORT(a, l, r)
1.  If l < r then
2.      mid ← (l + r) / 2
3.      MERGE_SORT(a, l, mid)
4.      MERGE_SORT(a, mid + 1, r)
5.      MERGE(a, l, mid, r)

Algorithm: MAIN
1.  Read n
2.  Create array a[0..n-1]
3.  For i ← 0 to n - 1 do
4.      Read a[i]
5.  MERGE_SORT(a, 0, n - 1)
6.  For i ← 0 to n - 1 do
7.      Print a[i] with space
8.  Print newline

